# Topics from this week:
# RegEx - searching for patterns within texts, strings, files, etc - like filtering for email inputs
# Lambda, Map, Filter, Recursion, Generators - 
# In & Out of place algorithms, two pointers, linked lists, merge sort, 
# Time & Space complexity, Data structures - Arrays, stacks, queues, linked lists

# Assignment - Create a object oriented program that calculates Return on Investment for a property
# Scenario 
# Purchase price of house - 400,000

class Roi():
    def __init__(self, num_units, purchase_price):
        self.num_units = num_units
        self.purchase_price = purchase_price
        self.income_dict = {}
        self.total_monthly_income = 0
        self.expenses_dict = {}
        self.total_monthly_expenses = 0
        self.monthly_cash_flow = 0
        self.investment_dict = {}
        self.total_investment = 0
        self.final_value = purchase_price
        self.years_appreciate = 0


#----------INCOME---------
    def income(self):
        print('\n')
        print('---------MONTHLY INCOME CALCULATOR---------')
        while True:
            if len(self.income_dict) == self.num_units:
                break
            # ask user for income stream for each unit in the property
            income = input(f'Type in the Unit # and income generated by that unit [Unit, $]--(type "f" to finish list)--: ')
            if income.lower() == 'f':
                break
            else:
                # we'll have to split this string and use 1st index as key and 2nd index as value
                #print(income.split(', '))
                unit_income = income.split(', ')
                self.income_dict[unit_income[0]] = unit_income[1]
                #print(self.income_dict)
        # print list of all the units and each income
        for key, value in self.income_dict.items():
            print(f'Unit {key} : ${value}')
        # calculate total monthly income from income dictionary
        for value in self.income_dict.values():
            self.total_monthly_income += int(value)
        print(f'Total monthly income: ${self.total_monthly_income}')
        print('\n')
        # self.expenses()
        

#-----Testing Code-----
# house = Roi(2,400000)
# house.income()

#----------EXPENSES---------
    def expenses(self):
        print('\n')
        print('---------MONTHLY EXPENSES CALCULATOR---------')
        while True:
            # ask user for expense stream for each unit in the property
            expense = input(f'Type in the expense name and cost [Expense name, cost]--(type "f" to finish list)--: ')
            if expense.lower() == 'f':
                break
            else:
                # we'll have to split this string and use 1st index as key and 2nd index as value
                #print(expense.split(', '))
                expense_cost = expense.split(', ')
                self.expenses_dict[expense_cost[0]] = expense_cost[1]
                #print(self.expenses_dict)
        # print list of all the units and each expense
        for key, value in self.expenses_dict.items():
            print(f'{key} : ${value}')
        # calculate total monthly expenses from expenses dictionary
        for value in self.expenses_dict.values():
            self.total_monthly_expenses += int(value)
        print(f'Total monthly expenses: ${self.total_monthly_expenses}')
        # self.cash_flow()

#-----Testing Code-----
# house = Roi(2,400000)
# house.expenses()


#---------CASH FLOW---------
# Dependent on Income and Expenses
# Monthly Cash flow = Income - Expenses
    def cash_flow(self):
        print('\n')
        print('---------MONTHLY CASH FLOW---------')
        self.monthly_cash_flow = self.total_monthly_income - self.total_monthly_expenses
        print(f'Monthly cash flow: ${self.monthly_cash_flow}')
        # self.investment()


#---------CASH ON CASH ROI---------
# Dependent on how much money we put into the deal
    # Down payment, closing costs, renovation, mics.
    # need to calculate Total investments
# Annual Cash Flow = 12 * Monthly Cash Flow
# Annual Cash Flow / Total Investment = Return on Investment 

#----------TOTAL INVESTMENT CALC---------
    def investment(self):
        print('\n')
        print('---------TOTAL INVESTMENT CALCULATOR---------')
        while True:
            # ask user for additional investments made forthe property
            investment = input(f'Type in your investments and their cost [Investment name, cost]--(type "f" to finish list)--: ')
            if investment.lower() == 'f':
                break
            else:
                # we'll have to split this string and use 1st index as key and 2nd index as value
                #print(investment.split(', '))
                investment_cost = investment.split(', ')
                self.investment_dict[investment_cost[0]] = investment_cost[1]
                #print(investments_dict)
        # print list of all investments and costs
        for key, value in self.investment_dict.items():
            print(f'{key} : ${value}')
        # calculate total investment
        for value in self.investment_dict.values():
            self.total_investment += int(value)
        print(f'Total Investment: ${self.total_investment}')
        # self.return_on_invest()

#Test Code
# house = Roi(2, 400000)
# house.investment()

#----------RETURN ON INVESTMENT CALC----------
    def return_on_invest(self):
        print('\n')
        # calc annual cash flow from monthly cash flow
        annual_cash_flow = 12 * self.monthly_cash_flow
        print(f'Annual Cash Flow: ${annual_cash_flow}')
        # want to factor in annual appreciation of property, Average house appreciation is 7.7% since 2012
        # annual_appreciation = round(self.purchase_price * .077)
        # print(f'Annual Appreciation of Property: ${annual_appreciation}')        
        print(f'Total Investment: ${self.total_investment}')
        roi = round(((annual_cash_flow/ self.total_investment) * 100), 2)
        print(f'Cash on Cash ROI = {roi}%')
        # print('\n')
        # choice = input(f'Would you like to email the ROI info, calculate the appreciation of your property, or quit? (Type "email", "appreciation") ')
        # if choice.lower() == "email":
        #     self.email_roi()
        # elif choice.lower() == "appreciation":
        #     self.appreciation()

#---------PROPERTY APPRECIATION-------
    def appreciation(self):
        print('\n')
        print('---------PROPERTY APPRECIATION CALCULATOR---------')
        self.years_appreciate = int(input("Type in the number of years you'd like to caculate for the appreciation: "))
        final_value = round((self.purchase_price)*((1+.077)**self.years_appreciate))
        print(f'After {self.years_appreciate} year(s), your property will be valued at ${final_value}')
        # print('\n')
        # choice = input(f'Would you like to email the ROI info? (Y/N)')
        # if choice.lower() == "y":
        #     self.email_roi()  
        #self.appreciation_calc()

# trying to use recursion for appreciation
    # def appreciation_calc(self):
    #     if self.years_appreciate <= 1:
    #         print(f'Year {self.years_appreciate} = {self.final_value}')
    #         self.final_value = self.final_value + (self.purchase_price * .077)
    #     else:
    #         return self.final_value * self.appreciation_calc()

# Year 0 = 400000
# Year 1 = Year 0 + (400000 * .077)
# Year 2 = Year 1 + (Year 1's value * .077)
# Year 3 = year 2 + (Year 2's value * .077)

# house = Roi(2, 400000)
# house.appreciation()

#---------EMAIL ROI INFO---------
    def email_roi(self):
        print('\n')
        while True:
            email_info = input('Please type in the email to forward your ROI information to: ')
            import re
            pattern = re.compile(r'\w+@\w+.(com|org)$')
            valid = pattern.search(email_info)
            if valid:
                print(f'Sending ROI inforomation to: {email_info}')
                break
            else:
                print('Invalid email address')
                

#---------RUNNER FUNCTION---------
    def runner(self):
        while True:
            choice = input("What do you want to do calculate? (Income, Expenses, Cash Flow, Investment, ROI, Appreciation, or quit) ").lower()
            if choice == "income" :
                self.income()
            elif choice == 'expenses':
                self.expenses()
            elif choice == 'cash flow':
                self.cash_flow()
            elif choice == "investment":
                self.investment()
            elif choice == 'roi':
                self.return_on_invest()
            elif choice == "appreciation":
                self.appreciation()
            elif choice == "quit":
                break
            else:
                print("Invalid choice!")

# didn't really use runner function because it's a linear process

house = Roi(2, 400000)
# house.email_roi()

house.runner()